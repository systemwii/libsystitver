// lookup tables of SHA1 hashes of known TMDs
#include <gccore.h>
typedef struct {
    s32 type;           // 0 (no match); 1 (tmd hash), 2 (cmd hash)
    s16 titleID;        // the title slot it's installed to (= IOS number) // negative on error
    u16 rev;            // title revision
    char* name;         // ios name ("original" for official titles)
    u8* hash;           // sha1 hash of title metadata
} SysTitTag;

// hashes of full TMDs, best used for verifying official titles
// todo: add missing stubs + KIOS + old revisions (from NUS or elsewhere)
SysTitTag tmdHashDict[] = {
    // stub 4 from NUS
    {1,  9,  1034, "official", (u8[]){0xc6,0xab,0x90,0x9b,0x68,0x41,0xbb,0xd5,0x75,0xf5,0x0b,0x75,0x6a,0x33,0xc6,0x95,0x09,0xe0,0x3b,0x52}},
    // stub 10 from NUS
    // stub 11 from NUS
    {1, 12,   526, "official", (u8[]){0x55,0x2f,0x62,0xe7,0x98,0x73,0x11,0xf9,0xef,0x66,0x31,0x45,0xe4,0x47,0x3d,0x2a,0x96,0x39,0x71,0x8a}},
    {1, 13,  1032, "official", (u8[]){0x10,0x0c,0xc6,0x71,0xa6,0xce,0x3c,0x5f,0xfe,0x59,0x90,0x47,0x63,0x26,0xb9,0x76,0x6f,0x43,0xfe,0x2e}},
    {1, 14,  1032, "official", (u8[]){0x16,0xaf,0x1a,0x5a,0xa7,0x71,0xe5,0x3b,0x91,0x73,0xf7,0xff,0xe5,0x3e,0x3a,0xe0,0x6d,0xcb,0xf7,0x62}},
    {1, 15,  1032, "official", (u8[]){0xc0,0x4e,0x91,0x04,0x91,0x7f,0x56,0xd6,0xca,0xc0,0x74,0xcb,0xe0,0xa7,0x6f,0x24,0x10,0xd9,0x30,0xe6}},
    // stub 16 from NUS
    {1, 17,  1032, "official", (u8[]){0xff,0x4b,0xcc,0xe1,0x5a,0x71,0x38,0xaf,0xc5,0x7d,0xdb,0xec,0xb9,0x9f,0xc8,0x47,0x51,0xb8,0xfc,0xfb}},
    // stub 20 from NUS
    {1, 21,  1039, "official", (u8[]){0x80,0x49,0x37,0xf7,0xd3,0xd4,0x9e,0xe4,0x98,0x28,0x86,0x4e,0x46,0xe8,0xc0,0xd5,0xcf,0xc8,0x2b,0x68}},
    {1, 22,  1294, "official", (u8[]){0x21,0x5b,0x14,0x32,0x82,0xb9,0x12,0xb2,0xa9,0x6a,0x2c,0x26,0x29,0xff,0xb6,0xcf,0xd2,0x3b,0x2a,0x63}},
    {1, 28,  1807, "official", (u8[]){0x02,0x47,0xbf,0x6d,0xd7,0x32,0xbc,0x66,0x24,0xc1,0x5d,0x1d,0x64,0x6e,0x17,0xf0,0xd7,0x6b,0x94,0xc4}},
    // stub 30 from NUS
    {1, 31,  3608, "official", (u8[]){0xa8,0x16,0x77,0xd5,0xe9,0x6c,0xc7,0x9c,0xb8,0x7a,0xed,0xa3,0x8e,0x05,0x59,0x1a,0x72,0x20,0x3d,0x37}},
    {1, 33,  3608, "official", (u8[]){0xf7,0x49,0xb2,0x4b,0xa8,0x47,0xac,0x68,0x16,0xaa,0xed,0x02,0x7f,0xab,0xb3,0xb4,0x94,0xec,0x8e,0x80}},
    {1, 34,  3608, "official", (u8[]){0xa5,0x3c,0x53,0xf2,0xd5,0x52,0x0f,0xf4,0xa8,0x26,0x05,0x29,0xe7,0xd0,0x79,0xc5,0x85,0xcd,0xb2,0x7e}},
    {1, 35,  3608, "official", (u8[]){0x8f,0xd2,0x5f,0x2d,0xe2,0x9a,0x52,0xcb,0xcf,0x9d,0x6b,0xc1,0xd4,0xeb,0xec,0x8d,0xd3,0x87,0x12,0x28}},
    {1, 36,  3608, "official", (u8[]){0xcf,0x56,0x1d,0x25,0x85,0x4d,0xa7,0xdb,0xbd,0x18,0x43,0x3f,0x05,0xf5,0x12,0x53,0x3c,0xe2,0x4d,0xb3}},
    {1, 37,  5663, "official", (u8[]){0xdb,0x6e,0x64,0xe9,0xb6,0xee,0x76,0x95,0xee,0x58,0x59,0xc1,0x56,0x18,0xfd,0xa8,0xfe,0x80,0x56,0x11}},
    {1, 38,  4124, "official", (u8[]){0x2a,0xb9,0x3b,0xf4,0xc2,0x97,0x44,0xc2,0xcb,0x7f,0xd2,0x24,0x70,0xcc,0xea,0xed,0xe1,0x93,0x79,0x73}},

    // stub KIOS 40 from NUS
    // KIOS 41 from NUS
    // KIOS 43 from NUS
    // KIOS 45 from NUS
    // KIOS 46 from NUS
    // KIOS 48 from NUS
    // stub 50 from NUS
    // stub 51 from NUS
    // stub KIOS 52 from NUS

    {1, 53,  5663, "official", (u8[]){0xdf,0xfa,0x80,0xd3,0x38,0x12,0xb6,0x9c,0x5d,0x5b,0x12,0xc5,0x7d,0x51,0x88,0x2f,0x45,0xe8,0xae,0xa5}},
    {1, 55,  5663, "official", (u8[]){0xe4,0x61,0x54,0x32,0x22,0x6e,0x87,0x9f,0xe1,0x0f,0xf1,0x0a,0xe5,0xdf,0xb6,0xca,0x91,0xd7,0xa2,0xe5}},
    {1, 56,  5662, "official", (u8[]){0x1f,0x21,0x52,0x72,0xbc,0x78,0x8d,0xee,0x31,0x36,0x79,0x60,0x2e,0xd7,0x5c,0x30,0xa1,0x77,0x5c,0x43}},
    {1, 57,  5919, "official", (u8[]){0x86,0x45,0xc2,0x4c,0x59,0x67,0xef,0x92,0xb9,0x41,0xea,0xb6,0x6a,0x5a,0xb4,0x58,0x8e,0x36,0x38,0x9a}},
    {1, 58,  6176, "official", (u8[]){0x34,0x05,0xb5,0xe9,0xce,0xf1,0x69,0xf5,0x12,0x45,0x1f,0x03,0xdd,0xa4,0x1b,0x6a,0xb7,0x7f,0xa6,0x32}},
    {1, 59,  9249, "official", (u8[]){0x9b,0xff,0xc0,0x24,0x42,0xcf,0x47,0xf1,0x22,0xc5,0xec,0x1b,0x8e,0xac,0xab,0x32,0xd7,0x4a,0x0e,0x71}},
    {1, 60,  6400, "official", (u8[]){0xdb,0x83,0x13,0x7b,0x43,0x6b,0x53,0x2c,0x50,0xf1,0x47,0xa6,0xc4,0x04,0xde,0xa4,0x14,0xe8,0x72,0x33}}, // stub
    {1, 61,  5662, "official", (u8[]){0xd7,0xb4,0x3e,0xff,0x2b,0x97,0xcc,0x12,0x92,0x46,0x83,0x78,0xd5,0xa0,0xf6,0x18,0x8c,0x52,0x06,0xa1}},
    {1, 62,  6430, "official", (u8[]){0x89,0x42,0xb4,0x89,0x05,0x25,0xe2,0x58,0x4f,0x6e,0x70,0x90,0xe5,0x57,0x35,0x50,0x55,0xfa,0xb2,0x5a}},
    {1, 70,  6912, "official", (u8[]){0x7a,0x09,0xd7,0x61,0x85,0x27,0x76,0x8c,0xc3,0x21,0xe4,0x60,0x7f,0x2f,0xc6,0x42,0x28,0xef,0xe1,0x71}}, // stub
    {1, 80,  6944, "official", (u8[]){0xea,0xc3,0x3c,0x6b,0x82,0x1d,0x11,0x1c,0x4a,0xdb,0x9b,0x22,0x4d,0xb4,0x36,0xd0,0xf9,0x1a,0xc1,0x6f}},
    
    {1,256,     6, "official", (u8[]){0x0b,0xda,0x4e,0x01,0xd0,0x75,0x91,0x6e,0x99,0xc1,0xa8,0x74,0x35,0x4d,0xb2,0xae,0x11,0x83,0x1d,0x5f}},
    {1,256,     5, "official", (u8[]){0x63,0xa1,0x8a,0x8b,0x5c,0x47,0xb7,0xe4,0x35,0x9a,0x74,0xdf,0x65,0xe6,0x47,0xac,0x33,0xb2,0x67,0xc5}},
    {1,256,     4, "official", (u8[]){0x9d,0xf6,0x88,0xf8,0x50,0x6b,0xeb,0xd2,0x41,0x9a,0xaf,0xbe,0x06,0x59,0xf0,0x5b,0x4d,0x94,0xf5,0x04}},
    {1,256,     2, "official", (u8[]){0x00,0x3b,0x2e,0x89,0x30,0x23,0xea,0x81,0xaf,0x89,0x40,0xba,0x2d,0x47,0x64,0x7c,0xb9,0x41,0x4a,0x6c}},

    {1,257,    10, "official", (u8[]){0x12,0x9b,0x91,0xb6,0xff,0x93,0x35,0x4f,0xe8,0xbe,0x51,0x4e,0x18,0x7a,0x39,0x29,0xac,0x26,0xa9,0xe9}},
    {1,257,     9, "official", (u8[]){0x2f,0x71,0x4a,0x7b,0x9a,0xd8,0xb8,0x7c,0xe6,0x65,0x92,0x32,0xc8,0x3a,0x64,0x48,0x16,0x12,0x4b,0x18}},
    {1,257,     8, "official", (u8[]){0x32,0x55,0x29,0x85,0x86,0xd4,0x18,0x91,0xc1,0xbf,0xcb,0x14,0x70,0x18,0x4a,0xba,0x0a,0xaf,0x7e,0xba}},
    {1,257,     5, "official", (u8[]){0x31,0xba,0x29,0xea,0x1f,0x22,0x9f,0xbf,0x0c,0x6c,0xc4,0xda,0xcf,0x24,0x69,0xaa,0x1b,0x06,0x6b,0x98}},
    {1,257,     4, "official", (u8[]){0x2c,0x68,0x3f,0xc7,0x14,0xa8,0xbb,0x2d,0x68,0x2c,0xa5,0x10,0x24,0x48,0xb4,0x19,0x21,0xaa,0xc5,0xa8}},
};

// hashes of TMD content metadata block (tmd+0x1e4 to tmd+EOF), best used for verifying content of homebrew
// note that this will not match titles whose content is reordered/at different IDs, so a better heuristic may be necessary for e.g. d2x cIOS
SysTitTag cmdHashDict[] = {
    {2,257,    10, "WiiGator (WiiPower)",   (u8[]){0xe4,0x07,0x61,0x3a,0x02,0x2a,0x20,0x23,0xf8,0x9a,0x77,0x2f,0x47,0x35,0xd1,0xea,0xd0,0x70,0xed,0xd3}},
    {2,257,     4, "WiiGator (GCBL 0.2)",   (u8[]){0x03,0xb7,0xd1,0x0b,0x58,0x9e,0xda,0x98,0x68,0x7d,0x7b,0x8b,0x89,0x0c,0xa0,0x36,0xb9,0xcd,0x2f,0xe9}},
    {2,257,     4, "Waninkoko (rev5)"   ,   (u8[]){0xba,0x8c,0xdc,0xea,0x61,0xf8,0x59,0x0e,0x09,0xb8,0xda,0x90,0xd8,0xd2,0xe6,0x83,0x32,0x5a,0x9e,0xff}},
    {2,257,     0, "DIOS MIOS Lite v1.3",   (u8[]){0xca,0x56,0xd8,0x68,0x93,0x8b,0x92,0xdf,0xb6,0x7d,0x9d,0xc4,0x95,0x45,0xc8,0xb2,0xe2,0x6f,0x7d,0x86}},
};
